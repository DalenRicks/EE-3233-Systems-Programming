#!/usr/bin/env python3

#Dalen Ricks

import time

def fibonacci_n(n :int) -> int:
    if n < 2:
        return n
    else:
        return fibonacci_n(n - 1) + fibonacci_n(n - 2)


def fibonacci_memo(n :int) -> int:
    memo = {}
    def fibonacci(n :int):
        if n not in memo:
            if n < 2:
                memo[n] = n
            else:
                memo[n] = fibonacci(n - 1) + fibonacci(n - 2)
        return memo[n]
    return fibonacci(n)

#Calculating Runtime for Naive Method
start_time_naive = time.time()
x = fibonacci_n(40)
end_time_naive = time.time()

runTime_naive = end_time_naive - start_time_naive
print(runTime_naive)

#Calculating Runtime for Memo Method
start_time_memo = time.time()
x = fibonacci_memo(40)
end_time_memo = time.time()

runTime_memo = end_time_memo - start_time_memo
print(runTime_memo)
